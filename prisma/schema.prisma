generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?      @db.ObjectId
  category    Category?    @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[]
  purchase    Purchase[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  courses   Course[]
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  title          String
  description    String?
  videoUrl       String?
  playbackId     String?
  publicId       String?
  position       Int
  isPublished    Boolean         @default(false)
  isFree         Boolean         @default(false)
  cloudinaryData CloudinaryData?
  courseId       String          @db.ObjectId
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress   UserProgress[]
}

model CloudinaryData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playbackId String?
  publicId   String?
  secureUrl  String?
  chapterId  String   @unique @db.ObjectId
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId    String
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model PaymentCustomer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  orderId   String   @unique
}
